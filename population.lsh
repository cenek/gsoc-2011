(libload "libc/make")
;(libload "../random.lsh")
(libload "libidx/idx-sort.lsh")

;; Object defines basic population construct and performs
;; basic popualation operations: <initialize> <sort> <off2par>
;; <print_population> <print_fit>
(defclass Population object 
  ((-idx2- (-uchar-)) pop)       ;;population of binary parents and offspring
  ((-idx1- (-double-)) fit)      ;;fitness values for population and offspring
  ((-int-) size g))              ;;size: size of population g: #length of genome

;; Population <s> size of popualation 
;; <l> length of a genome
(defmethod Population Population(s l)
  (declare (-int-) s l)
  (cpheader "#include \"random.h\"")
  (setq pop (uchar-array s l))
  (setq fit (double-array s))
  (setq size s)
  (setq g l))

;;returns size of population
(defmethod Population get_population_size() size)

;;returns genome length
(defmethod Population get_genome_length() g)

;;returns a copy of a genome at position i in pop
(defmethod Population get_genome(i)
  (declare (-int-) i)
  (assert (and (< i size) (>= i 0))
	  "POPULATION.GET_GENOME: Index out of range")
  (array-copy (idx-select pop 0 i) (uchar-array g)))

;;sets a genome at position i in pop to value vect
(defmethod Population set_genome(i vect)
  (declare (-int-) i)
  (declare (-idx1- (-uchar-)) vect)
  (assert (and (< i size) (>= i 0) (= g (idx-shape vect 0))) 
	  "POPULATION.SET_GENOME: Index out of range")
  (array-copy vect (idx-select pop 0 i)))

;;returns a fitness value of individual at position i
(defmethod Population get_fitness(i)
  (declare (-int-) i)
  (assert (and (< i size) (>= i 0)) 
	  "POPULATION.GET_FITNESS: Index out of range")  
  (fit i))

;;sets a value of individual at position i to value f
(defmethod Population set_fitness(i f)
  (declare (-int-) i)
  (declare (-double-) f)
  (assert (and (< i size) (>= i 0) (>= f 0)) 
	  "POPULATION.SET_FITNESS: Index out of range or negative fitness")
  (fit i f))

;;sets the population pop to p
;;setting new population will also reset fitness values 
(defmethod Population set_population(p)
  (declare (-idx2- (-uchar-)) p)
  (assert (same-shape-p p pop)
	  "POPULATION.SET_POPULATION: Arrays have incompatible sizes")
  (array-copy p pop)
  (array-clear fit 0))

;;gets the population pop
(defmethod Population get_population() pop)

;;gets fitness of the entire population
(defmethod Population get_population_fitness() fit)

;; initialize population genome with bias <r>
;; sets population fitness to 0
;; if <r> is 0 randomly select distribution (used for uniform generation
;;           o.w. generate popualation with bias r
(defmethod Population init(r)
  (declare (-double-) r)
  (let ((unif (if (= r 0) 1 0)))
    (declare (-int-) unif)
    (array-clear fit 0)
    (idx-bloop ((row pop))
      (if (= unif 1)
	  (setq r (to-double #{uniform()#})))
      (idx-bloop ((allele row))
	(if (<= (to-double #{uniform()#}) r)
	    (allele 1)
	  (allele 0)))))
  ())

  
;; Print individual's genome
(defmethod Population print_genome (p)
  (declare (-idx1- (-ubyte-)) p)
  (idx-bloop ((r p))
    (printf "%d" (r)))
  )

;; print all fitness values in population
(defmethod Population print_fit()
  (for* (i 0 size)
    (declare (-int-) i)
    (printf "%f " (fit i))
;; prints empty line for 2D pop
;;    (if (and (= (mod (+ i 1) n) 0) (<> i 0))
;;	(printf "\n"))
    ))

;;print all pop's genomes followed by fitness and density
;;if fn is null, print to stdout, ow print to file
(defmethod Population print_population(fn)
  (declare (-gptr-) fn)
  (if (<> fn NULL)
      (progn       ;;print to file pointed to by fn
	(for* (i 0 size)
	  (declare (-int-) i)
	  (fprintf fn " %d " i)
	  (for* (j 0 g)
	    (declare (-int-) j)
	    (fprintf fn "%d" (pop i j)))
	  (fprintf fn " h_fit: %f \n" (fit i)))
	(fprintf fn "\n"))
    (progn         ;;print to stdout
      (for* (i 0 size)
	(declare (-int-) i)
	(printf " %d " i)
	(for* (j 0 g)
	  (declare (-int-) j)
	  (printf "%d " (pop i j)))
	(printf " h_fit: %f \n" (fit i)))
      (printf "\n"))
    ))

;; normalize fitness
(defmethod Population normalize_fitness()
  (let ((d_fitness 0))
    (declare (-double-) d_fitness)
    (setq d_fitness ((idx-sumacc fit [d@ 0])))
    (for* (i 0 size)
      (declare (-int-) i)
      (fit i (/ (fit i) d_fitness)))
    ))

;; returns value of the highest fitness value in population
(defmethod Population get_highest_fitness()
  ((idx-sup fit))
  )

;; returns value of the lowest fitness value in population
(defmethod Population get_lowest_fitness()
  ((idx-inf fit))
  )

;; return index of individual with highest fitness 
;; if there is more than one with the same highest fitness
;; choose one random among them.
(defmethod Population select_best ()
  (let ((i_best -1)   ;;index of best indiv
	(f_best -1))  ;;fitness of best indiv
    (declare (-double-) f_best)
    (declare (-int-) i_best)
    (setq f_best (==> this get_highest_fitness))
    (for* (i 0 size)
      (declare (-int-) i)
      (when (= (fit i) f_best)
 	(if (< i_best 0)
	    (progn (setq i_best i)
		   (setq f_best (fit i)))
	  (if (< (to-double #{uniform()#}) 0.2)
	      (progn (setq i_best i)
		     (setq f_best (fit i))))
	)))
   (assert (and (>= i_best 0) (< i_best size)) 
	  "POPULATION.SET_FITNESS: Index out of range or negative fitness")
    i_best))

;; sort population of parents and offspring 
;; in dir=0 in decreasing order
;; in dir=1 in increasing order
;; even though the sort routine is sorting up, the swaps are initialized
;; from n-1 to 0
(defmethod Population sort_population(dir)
  (declare (-int-) dir)
  (let* ((i (- size 1)) 
	 (cl_pop (copy-array pop))        ;;genome population clone
	 (swaps (int-array size)))        ;;vector recording swaps

    (declare (-idx2- (-ubyte-)) cl_pop)
    (declare (-idx1- (-int-)) swaps)
    (declare (-int-) i )
    
    (for* (i 0 size) (swaps i i))         ;init swap vector
     
;(printf"after init\n")
;    (for* (i 0 size)(printf "%d " (swaps i)))

    (if (= dir 0)
	(array-sortdown! fit swaps)
      (array-sortup! fit swaps))          ;;sort and record swaps in swaps

;(printf"after sort\n")
;    (for* (i 0 size)(printf "%d " (swaps i)))

    ;;according to recorded swaps in swaps move pop to cl_pop    
    (for* (i 0 size)
      (array-copy 
       (idx-select* pop (swaps i)) 
       (idx-select* cl_pop i))
      )
    (array-copy cl_pop pop))
  ())


;; Copy over offspring to parents: both the genomes, densities and fitness.
;; fitness vector is all 0s
;; (defmethod Population off2par()
;;   (let* ((s (* m n))
;; 	 (o_p (idx-shift (idx-trim* pop s) 0 s)) ;;index to pop offspring population
;; 	 (p_p (idx-trim* pop s))                 ;;index to pop parent population
;; 	 (o_f (idx-shift (idx-trim* fit s) 0 s)) ;;index to fit offspring population
;; 	 (p_f (idx-trim* fit s)))                ;;index to fit parent population
;;     (declare (-idx2- (-ubyte-)) o_p p_p)
;;     (declare (-idx1- (-double-)) o_f p_f)
;;     (array-copy o_p p_p)
;;     (array-copy o_f p_f)))

(let ((dhc-make-lushflags (concat dhc-make-lushflags (sprintf " -I%s" PROJECTxDIR))))
  (dhc-make-class () Population))
