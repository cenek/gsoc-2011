(libload "libc/make")
(libload "../random.lsh")
(libload "../setup.lsh")
(libload "idx-sort")
(libload "libc/stdio.lsh")

;; Object defines basic population construct and performs
;; basic popualation operations: <initialize> <sort> <off2par>
;; <print_pop> <print_fit>
(defclass Population object 
  ((-idx2- (-ubyte-)) pop)       ;;population of binary parents and offspring
  ((-idx1- (-double-)) fit)      ;;fitness values for population and offspring
  ((-int-) m n g))               ;;m: #rows n: #columns g: #length of genome

;; Population <r> number of rows in popualation 
;; <c> number of columns in population
;; <l> length of a genome
(defmethod Population Population(r c l)
  (declare (-int-) r c l)
  (cpheader "#include \"random.h\"")
  ;#{seed_random(-1) #}
  (setq pop (ubyte-array (* r c 2) l))
  (setq fit (double-array (* r c 2)))
  (setq m r)
  (setq n c)
  (setq g l))

;;returns a copy of a genome at position i
(defmethod Population get_genome(i)
  (declare (-int-) i)
  (assert (and (< i (* m n 2)) (>= i 0)) 
	  "POPULATION.GET_GENOME: Index out of range")
  (array-copy (idx-select pop 0 i) (ubyte-array g)))

;;sets a genome at position i to value vect
(defmethod Population set_genome(i vect)
  (declare (-int-) i)
  (declare (-idx1- (-ubyte-)) vect)
  (assert (and (< i (* m n 2)) (>= i 0) (= g (idx-shape vect 0))) 
	  "POPULATION.SET_GENOME: Index out of range")
  (array-copy vect (idx-select pop 0 i)))

;;returns a fitness value of individual at position i
(defmethod Population get_fitness(i)
  (declare (-int-) i)
  (assert (and (< i (* m n 2)) (>= i 0)) 
	  "POPULATION.GET_FITNESS: Index out of range")  
  (fit i))

;;sets a value of individual at position i to value f
(defmethod Population set_fitness(i f)
  (declare (-int-) i)
  (declare (-double-) f)
  (assert (and (< i (* m n 2)) (>= i 0) (>= f 0)) 
	  "POPULATION.SET_FITNESS: Index out of range or negative fitness")
  (fit i f))

;; initialize population genome with bias <r>
;; sets population fitness to 0
;; if <r> is 0 randomly select distribution (used for uniform generation
;;           o.w. generate popualation with bias r
(defmethod Population init(r)
  (declare (-double-) r)
  (let ((unif (if (= r 0) 1 0)))
    (declare (-int-) unif)
    (array-clear fit 0)
    (idx-bloop ((row pop))
      (if (= unif 1)
	  (setq r (to-double #{uniform()#})))
      (idx-bloop ((allele row))
	(if (<= (to-double #{uniform()#}) r)
	    (allele 1)
	  (allele 0)))))
  ())

  
;; Print individual's genome
(defmethod Population print_genome (p)
  (declare (-idx1- (-ubyte-)) p)
  (idx-bloop ((r p))
    (printf "%d" (r)))
  )

;; print all fitness values in population
(defmethod Population print_fit()
  (for* (i 0 (* m n))
    (declare (-int-) i)
    (printf "%f " (fit i))
    (if (and (= (mod (+ i 1) n) 0) (<> i 0))
	(printf "\n"))
    ))

;;print all pop's genomes followed by fitness and density
(defmethod Population print_pop(fn)
  (declare (-gptr-) fn)
  (for* (i 0 (* m n))
    (declare (-int-) i)
    (fprintf fn " %d " i)
    (for* (j 0 g)
      (fprintf fn "%d" (pop i j)))
    (fprintf fn " h_fit: %f \n" (fit i)))
  (fprintf fn "\n"))

;; returns value of the highest fitness value in population
(defmethod Population get_highest_fitness()
  ((idx-sup (idx-trim* fit (* m n))))
)

;; returns value of the lowest fitness value in population
(defmethod Population get_lowest_fitness()
  ((idx-inf (idx-trim* fit (* m n))))
)

;; return index of individual with highest fitness 
;; if there is more than one with the same highest fitness
;; choose one random among them.
(defmethod Population select_best ()
  (let ((best -1)
	(f_best -1))
    (declare (-double-) f_best)
    (declare (-int-) best)
    ;(setq f_best ((idx-sup fit)))
    (for* (i 0 (* m n))
      (declare (-int-) i)
      (when (>= (fit i) f_best)
	(if (> (fit i) f_best)
	    (progn (setq best i)
		   (setq f_best (fit i)))
	  (if (< (to-double #{uniform()#}) 0.002)
	      (progn (setq best i)
		     (setq f_best (fit i))))
	)))
    best))

;; Not used for coevolution.
;; sort population of parents and offspring 
;; in dir=1 in decreasing order
;; in dir=0 in increasing order
;; even though the sort routine is sorting up, the swaps are initialized
;; from n-1 to 0
(defmethod Population sort(dir)
  (declare (-int-) dir)
  (let* ((i (- (idx-shape fit 0) 1)) 
	 (r 0) (c 0)                              ;;temp variables
	 (cl_pop (copy-array pop))                ;;genome population clone
	 (p (int-array (idx-shape fit 0))))        ;;p vector recording swaps

    (declare (-idx2- (-ubyte-)) cl_pop)
    (declare (-idx1- (-int-)) p)
    (declare (-int-) i r c)
    
    (idx-bloop ((e p)) (e i) (decr i)) ;;initialize p vector with n-1 to 0
    (when (= dir 0)
      (idx-reverse! p 0))
    (idx-d1i1sortup fit p)             ;;sort and record swaps in p

    ;;according to recorded swaps in p swap pop to cl_pop    
    (for* (i 0 (length p))
      (array-copy 
       (idx-select* pop (p i)) 
       (idx-select* cl_pop i))
      )
    (array-copy cl_pop pop))
  ())


;; Copy over offspring to parents: both the genomes, densities and fitness.
;; fitness vector is all 0s
(defmethod Population off2par()
  (let* ((s (* m n))
	 (o_p (idx-shift (idx-trim* pop s) 0 s)) ;;index to pop offspring population
	 (p_p (idx-trim* pop s))                 ;;index to pop parent population
	 (o_f (idx-shift (idx-trim* fit s) 0 s)) ;;index to fit offspring population
	 (p_f (idx-trim* fit s)))                ;;index to fit parent population
    (declare (-idx2- (-ubyte-)) o_p p_p)
    (declare (-idx1- (-double-)) o_f p_f)
    (array-copy o_p p_p)
    (array-copy o_f p_f)))

(let ((dhc-make-lushflags (concat dhc-make-lushflags (sprintf " -I%s" PROJECTxDIR))))
  (dhc-make-class () Population))
