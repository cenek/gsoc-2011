(libload "libc/make")
(libload "..\setup.lsh")
;(libload (concat lushdir "/lsh/libc/constants.lsh"))


(let ((lm (new LushMake)))
  (==> lm rule "random.o" '("random.c"))
  (==> lm setflags "-lm")
  (==> lm make)
  (==> lm load))

(let ((lm (new LushMake)))
  (==> lm rule "torus.o" '("torus.c"))
  (==> lm setflags "-lm")
  (==> lm make)
  (==> lm load))

(libload "ga.lsh")


(defun test-ga (&optional (m 50) (n 50) (g 20) (x 100))
  (declare (-int-) m n g)
  (let ((ga (new GeneticAlgorithm m n g))
	(i 0)
	(l ()))
    (while (< i x)
      (printf "G: %d Initial\n" i)
      (==> ga sort)
      (==> ga print)
      (==> ga repro)
      (==> ga eval)
      (==> ga off2par)
      (printf "New\n")
      (==> ga print)
      (incr i)
      (print)
      )

    (for (i 0 100) 
      (setq l (nconc1 l (int (* (rand) 10))))
      ;(print l)
      )
    (print l)
))