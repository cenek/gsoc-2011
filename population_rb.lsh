(libload "../random.lsh")
(libload "../setup.lsh")
(libload "RectBound.lsh")
(libload "population.lsh")
(libload "libc/stdio.lsh")

;; Object defines basic population construct and performs
;; basic popualation operations: <initialize> <sort> <off2par>
;; <print_pop> <print_fit>
(defclass PopulationRB Population 
  ((-idx2- (-int-)) cor)       ;;cooridnates of internal rect
  )

;; Population <r> number of rows in popualation 
;; <c> number of columns in population
;; <l> length of a genome
(defmethod PopulationRB PopulationRB(r c l)
  (declare (-int-) r c l)
  (cpheader "#include \"random.h\"")
  (==> this Population r c l)

  (setq cor (int-array (* r c 2) 4))
)

;;sets the rectangle coordinates to position i
(defmethod PopulationRB set_cor(i vect)
  (declare (-int-) i)
  (declare (-idx1- (-int-)) vect)

  (assert (and (< i (* m n 2)) (>= i 0)) 
	  "POPULATION.SET_COORDINATES: Index out of range")
  (array-copy vect (idx-select cor 0 i)))

;;returns a copy of a rectangle coordinates at position i
(defmethod PopulationRB get_cor(i)
  (declare (-int-) i)
  (assert (and (< i (* m n 2)) (>= i 0)) 
	  "POPULATION.GET_COORDINATES: Index out of range")
  (array-copy (idx-select cor 0 i) (int-array 4)))

;; initialize population with bias <r>
;; if <r> is 0 randomly select distribution (used for uniform generation
;;           o.w. generate popualation with bias r
(defmethod PopulationRB init_rb()
   (let ((rb (new RectBound ICxCOLUMNS ICxROWS DENSxO DENSxI MAXxITERATIONS)))
     (array-clear fit 0)
     (for* (i 0 (* m n))
       (array-copy (idx-flatten (==> rb init)) (idx-select pop 0 i))
       (array-copy (==> rb get_cor) (idx-select cor 0 i)))
       
     )
     ;(printf "*************SHOULD NOT SEE THIS *****************\n")
     ())

;; initialize population with bias <r>
;; if <r> is 0 randomly select distribution (used for uniform generation
;;           o.w. generate popualation with bias r
(defmethod PopulationRB init_box()
   (let ((rb (new RectBound ICxCOLUMNS ICxROWS DENSxO DENSxI MAXxITERATIONS)))
     (array-clear fit 0)
     (for* (i 0 (* m n))
       (array-copy (idx-flatten (==> rb init_box POINTS)) (idx-select pop 0 i))
       (array-copy (==> rb get_cor) (idx-select cor 0 i)))

     )())

;;print all pop's genomes followed by fitness and density
(defmethod PopulationRB print_pop(fn)
  (declare (-gptr-) fn)
  (for* (i 0 (* m n))
    (declare (-int-) i)
    (fprintf fn " %d " i)
    (for* (j 0 g)
      (fprintf fn "%d" (pop i j)))
    (fprintf fn " x:%d y:%d q:%d z:%d  rb_fit: %f \n" (cor i 0)(cor i 1)(cor i 2)(cor i 3)(fit i)))
  (fprintf fn "\n"))

;;overwrites Population.init and calls init_rb 
(defmethod PopulationRB init(r)
  (declare (-double-) r)
  (if (= RBxTASK 0)
      (==> this init_rb)
    (==> this init_box))
  ())

;; Copy over offspring to parents: both the genomes, densities and fitness.
;; fitness vector is all 0s
(defmethod PopulationRB off2par()
  (let* ((s (* m n))
	 (o_p (idx-shift (idx-trim* pop s) 0 s)) ;;index to pop offspring population
	 (p_p (idx-trim* pop s))                 ;;index to pop parent population
	 (o_c (idx-shift (idx-trim* cor s) 0 s)) ;;index to cor offspring population
	 (p_c (idx-trim* cor s))                 ;;index to cor parent population
	 (o_f (idx-shift (idx-trim* fit s) 0 s)) ;;index to fit offspring population
	 (p_f (idx-trim* fit s)))                ;;index to fit parent population
    (declare (-idx2- (-ubyte-)) o_p p_p)
    (declare (-idx2- (-int-)) o_c p_c)
    (declare (-idx1- (-double-)) o_f p_f)
 
    (array-copy o_p p_p)
    (array-copy o_c p_c)
    (array-copy o_f p_f)))



;;****** NOT DONE ****

;; OVERWRITE:sort method in Popoulation class
;; Not used for coevolution.
;; sort population datamembers in increasing order of fitness
;; (defmethod PopulationRB sort()
;;   (let* ((i (- (idx-shape fit 0) 1)) (r 0) (c 0) ;;temp variables
;; 	 (cl_pop (copy-array pop))               ;;population clone
;; 	 (p (int-array (idx-shape fit 0)))       
;; 	 (cl_cor (copy-array cor))
;; 	 (p_cl (double-array (idx-shape fit 0))))     ;;p vector recording swaps 

;;     (declare (-idx2- (-ubyte-)) cl_pop p_cl)
;;     (declare (-idx1- (-int-)) p cor)
;;     (declare (-int-) i r c)
    
;;     (idx-bloop ((e p)) (e i) (decr i)) ;;initialize p vector with n-1 to 0
;;     (idx-d1i1sortup fit p)             ;;sort and record swaps in p

;;     ;;according to recorded swaps in p swap pop to cl_pop    
;;     (for* (i 0 (length p))
;;       (p_cl i (fit (p i)))
;;       (array-copy 
;;        (idx-select* pop (p i)) 
;;        (idx-select* cl_pop i))
;;       )
;;     (array-copy p_cl fit)
;;     (array-copy cl_pop pop)))

(defmethod PopulationRB sort(dir)
  (declare (-int-) dir) 
  ()
)

(let ((dhc-make-lushflags (concat dhc-make-lushflags (sprintf " -I%s" PROJECTxDIR))))
  (dhc-make-class () PopulationRB))
