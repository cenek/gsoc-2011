(libload "libc/make")
(libload "libc/stdio.lsh")
(libload "libstd/kwdargs.lsh")
(libload "setup.lsh")
(libload "random.lsh")
(libload "population.lsh")
(libload "evolution.lsh")
;(libload "problem1.lsh")



;; (let ((lm (new LushMake)))
;;   (==> lm rule "random.o" '("random.c"))
;;   (==> lm setflags "-lm")
;;   (==> lm make)
;;   (==> lm load))

(let ((lm (new LushMake)))
  (==> lm rule "torus.o" '("torus.c"))
  (==> lm setflags "-lm")
  (==> lm make)
  (==> lm load))

(defclass GeneticAlgorithm object
  ((-obj- (Problem)) ob_problem)
  ((-double-) seed HOSTxCR PARASxCR HOSTxMU PARASxMU)
  ((-int-) GENERATIONS HOSTxPOPxSIZE PARASxPOPxSIZE 
	   HOSTxGENOME PARASxGENOME  FITNESSxSAMPLExSIZE 
	   REPRODUCTIONxSELECTION)
  ((-gptr-) FN)
  ((-idx2- (-uchar-)) HOSTxPOPxINIT PARASxPOPxINIT)
)

;;Logging function for messages into stdio or file
(defmethod GeneticAlgorithm log (note)
  (declare (-str-) note)
  (if (<> FN NULL)
      (fprintf FN "%s" note)
    (printf (sprintf "%s" note))))

(defmethod GeneticAlgorithm GeneticAlgorithm (ob _GENERATIONS _HOSTxPOPxSIZE _PARASxPOPxSIZE _HOSTxGENOME _PARASxGENOME _FN)
  (cpheader "#include \"random.h\"")
  (declare (-obj- (Problem)) ob)
  (declare (-int-) _GENERATIONS _HOSTxPOPxSIZE _PARASxPOPxSIZE _HOSTxGENOME _PARASxGENOME)
  (declare (-str-) _FN)
  (setq ob_problem ob)
  (setq GENERATIONS _GENERATIONS)
  (setq HOSTxPOPxSIZE _HOSTxPOPxSIZE) 
  (setq PARASxPOPxSIZE _PARASxPOPxSIZE)
  (setq HOSTxGENOME _HOSTxGENOME)
  (setq PARASxGENOME _PARASxGENOME)
  (if (<> _FN "")
      (setq FN (fopen _FN "wb"))
    (setq FN NULL))
  (setq FITNESSxSAMPLExSIZE 9)
  (setq REPRODUCTIONxSELECTION 1)
  (setq HOSTxCR 1)
  (setq PARASxCR 1)
  (setq HOSTxMU (/ 1 HOSTxGENOME))
  (setq PARASxMU (/ 1 PARASxGENOME))
  (setq HOSTxPOPxINIT (uchar-array HOSTxPOPxSIZE HOSTxGENOME))
  (setq PARASxPOPxINIT (uchar-array PARASxPOPxSIZE PARASxGENOME))
  (setq seed (to-double #{seed_random(-1) #}))
  (==> this log (sprintf "To re-seed experiment, use absolute value of: %f to replicate this experiment\n" seed))
  ;(printf "To re-seed experiment, use absolute value of: %f to replicate this experiment\n" seed)
()
)

;;(==> GeneticAlgorithm set_host_mutation <HOSTxMU>) 
;;bitwise mutation probability for solution/host genome. 
;;If unset it is 1/HOSTxGENOME
(defmethod GeneticAlgorithm set_host_mutation (_HOSTxMU)
  (declare (-double-) _HOSTxMU)
  (assert (and (< _HOSTxMU 1) (> _HOSTxMU 0))
	  "HOSTxMUTATION: Value out of range <0,1>")
  (setq HOSTxMU _HOSTxMU)
)

;;(==> GeneticAlgorithm set_paras_mutation <pARASxMU>) 
;;bitwise mutation probability for test/parasite genome. 
;;If unset it is 1/PARASxGENOME
(defmethod GeneticAlgorithm set_paras_mutation (_PARASxMU)
  (declare (-double-) _PARASxMU)
  (assert (and (< _PARASxMU 1) (> _PARASxMU 0))
	  "PARASxMUTATION: Value out of range <0,1>")
  (setq PARASxMU _PARASxMU)
)

;;(==> GeneticAlgorithm set_host_crossover <HOSTxCR>) 
;;probability of using one point crossover as reproduction 
;;operator for solution/host population.  
;;If unset it is 1 (always reproduce by 1pt crossover followed 
;;by a bitwise mutation) set to 0 for mutation reproduction only
(defmethod GeneticAlgorithm set_host_crossover (_HOSTxCR)
  (declare (-int-) _HOSTxCR)
  (assert (or (<> _HOSTxCR 1) (<> _HOSTxCR 0))
	  "HOSTxCR: Value out of range 0 or 1")
  (setq HOSTxCR _HOSTxCR)
)

;;(==> GeneticAlgorithm set_paras_crossover <PARASxCR>) 
;;probability of using one point crossover as reproduction 
;;operator for tests/paras population.  
;;If unset it is 1 (always reproduce by 1pt crossover followed 
;;by a bitwise mutation) set to 0 for mutation reproduction only
(defmethod GeneticAlgorithm set_paras_crossover (_PARASxCR)
 (declare (-int-) _PARASxCR)
  (assert (or (<> _PARASxCR 1) (<> _PARASxCR 0))
	  "PARASxCR: Value out of range 0 or 1")
  (setq PARASxCR _PARASxCR)
)

;;(==> GeneticAlgorithm set_fitness_sample_size <FITNESSxSAMPLExSIZE>) 
;;set how many tests/parasites used to assign solution/host fitness
;;value must be >0
(defmethod GeneticAlgorithm set_fitness_sample_size (_FITNESSxSAMPLExSIZE)
 (declare (-int-) _FITNESSxSAMPLExSIZE)
  (assert (> _FITNESSxSAMPLExSIZE 1)
	  "FITNESSxSAMPLExSIZE: PARASxCR: Value must be >0")
  (setq FITNESSxSAMPLExSIZE _FITNESSxSAMPLExSIZE)
)

;;(==> GeneticAlgorithm set_elite_size <ELITExSIZE>) 
;;if value 0 no elitest copied during reproduction
;;if value ELITExSIZE>0 then ELITExSIZE top fitness genomes are copied to offspring pop
;; (defmethod GeneticAlgorithm set_elite_size (_ELITExSIZE)
;;  (declare (-int-) _ELITExSIZE)
;;   assert (and (> _ELITExSIZE 0) (< _ELITExSIZE HOSTxPOPxSIZE))
;; 	  "ELITExSIZE: Value must be >0 and < POPxSIZE")
;;   (setq ELITExSIZE _ELITExSIZE)
;; )

;;(==> GeneticAlgorithm set_repro_selection <REPROxSELECTION>) 
;;if value 0 use random selection (w/o fitness bias)
;;if value 1 use roulette wheel selection
;;if value 2 use tournament selection of 9 where first indiv is chosen 
;;with bias 0.5^rank, and second is chosen at random w/o bias from tournament group
(defmethod GeneticAlgorithm set_reproduction_selection (_REPRODUCTIONxSELECTION)
 (declare (-int-) _REPRODUCTIONxSELECTION)
  (assert (and (>= _REPRODUCTIONxSELECTION 0) (< _REPRODUCTIONxSELECTION 3))
	  "REPRODUCTIONxSELECTION: Unknown type of reproduction selection (value must be 0,1,2")
  (setq REPRODUCTIONxSELECTION _REPRODUCTIONxSELECTION)
)

;;(==> GeneticAlgorithm set_population <HOSTxPOPxINIT> <PARASxPOPxINIT>
;;initializes populations of hosts and parasites to predefined arrays rather than random
;;Arrays must have size HOSTxPOPxSIZE by HOSTxGENOME and PARASxPOPxSIZE by PARASxGENOME respectively.)
(defmethod GeneticAlgorithm set_populations (_HOSTxPOPxINIT _PARASxPOPxINIT)
  (declare (-idx2- (-uchar-)) _HOSTxPOPxINIT _PARASxPOPxINIT)
  (assert (and (same-shape-p _HOSTxPOPxINIT HOSTxPOPxINIT)
	       (same-shape-p _PARASxPOPxINIT PARASxPOPxINIT))
	  "HOSTxPOPxINIT or PARASxPOPxINIT: Array shape(s) other than host/paras populations")
  (array-copy _HOSTxPOPxINIT HOSTxPOPxINIT)
  (array-copy _PARASxPOPxINIT PARASxPOPxINIT))

(defmethod GeneticAlgorithm evolution (_HOSTxINIT _PARASxINIT _ELITExSIZE)
  (declare (-double-) _HOSTxINIT _PARASxINIT)
  (declare (-int-) _ELITExSIZE)
  (let* ((host (new Population HOSTxPOPxSIZE HOSTxGENOME))
	 (paras (new Population PARASxPOPxSIZE PARASxGENOME))
	 (evo (new Evolution ob_problem))
	 (reinit_flag _PARASxINIT))
    (declare (-obj- (Population)) host paras)
    (declare (-obj- (Evolution)) evo)
    ;(declare (-double-) reinit_flag)
    
    (assert (and (> _HOSTxINIT -1) (< _HOSTxINIT 1)
		 (> _PARASxINIT -1) (< _PARASxINIT 1))
	    "HOSTxINIT or PARASxINIT: Values out of bounds <-1, 1>")
    ;initialize hosts
    (==> host init _HOSTxINIT)
    (if (< _HOSTxINIT 0)
	(==> host set_population HOSTxPOPxINIT)
      (array-copy (==> host get_population) HOSTxPOPxINIT))

    ;initialize parasites
    (==> paras init _PARASxINIT)
    (if (< _PARASxINIT 0)
	(==> paras set_population PARASxPOPxINIT)
      (array-copy (==> paras get_population) PARASxPOPxINIT))
    
    ;;run evolution loop
    (for* (i 0 GENERATIONS)
      ;(declare (-int-) i)
      ;assign host fitness 
      (==> evo evaluate_evolution host paras FITNESSxSAMPLExSIZE)
      ;normalize host fitness to <0,1)
      (==> host normalize_fitness)
      ;sort host population 
      (==> host sort_population 0) ;descending
      ;reproduce hosts
      (==> this log (sprintf "G: %d\n hosts: \n" i ))
      ;print host population
      (==> host print_population FN)
      (==> this log (sprintf "paras: \n"))
      ;print paras population
      (==> paras print_population FN)
      (==> evo reproduce host HOSTxCR HOSTxMU _ELITExSIZE REPRODUCTIONxSELECTION)
      ;reinitialize parasites
      (if (< _PARASxINIT 0)
	  (==> ob_problem paras_init (==> paras get_population))
	(==> paras init _PARASxINIT))
      )
    ))

(defmethod GeneticAlgorithm coevolution (_HOSTxINIT _PARASxINIT _ELITExSIZE)
  (declare (-double-) _HOSTxINIT _PARASxINIT)
  (declare (-int-) _ELITExSIZE)
  (let* ((host (new Population HOSTxPOPxSIZE HOSTxGENOME))
	 (paras (new Population PARASxPOPxSIZE PARASxGENOME))
	 (evo (new Evolution ob_problem))
	 (reinit_flag _PARASxINIT))
    (declare (-obj- (Population)) host paras)
    (declare (-obj- (Evolution)) evo)
    ;(declare (-double-) reinit_flag)
    
    (assert (and (> _HOSTxINIT -1) (< _HOSTxINIT 1)
		 (> _PARASxINIT -1) (< _PARASxINIT 1))
	    "HOSTxINIT or PARASxINIT: Values out of bounds <-1, 1>")
    ;initialize hosts
    (==> host init _HOSTxINIT)
    (if (< _HOSTxINIT 0)
	(==> host set_population HOSTxPOPxINIT)
      (array-copy (==> host get_population) HOSTxPOPxINIT))

    ;initialize parasites
    (==> paras init _PARASxINIT)
    (if (< _PARASxINIT 0)
	(==> paras set_population PARASxPOPxINIT)
      (array-copy (==> paras get_population) PARASxPOPxINIT))
    
    ;;run evolution loop
    (for* (i 0 GENERATIONS)
      (declare (-int-) i)
      ;assign host fitness 
      (==> evo evaluate_coevolution host paras FITNESSxSAMPLExSIZE)
      ;normalize host fitness to <0,1)
      (==> host normalize_fitness)
      ;sort host population 
      (==> host sort_population 0) ;descending
      ;reproduce hosts
      (==> this log (sprintf "G: %d\n hosts: \n" i ))
      ;print host population
      (==> host print_population FN)
      ;normalize paras fitness to <0,1)
      (==> paras normalize_fitness)
      ;sort paras population 
      (==> paras sort_population 0) ;descending
      (==> this log (sprintf "paras: \n"))
      ;print paras population
      (==> paras print_population FN)
      (==> evo reproduce host HOSTxCR HOSTxMU _ELITExSIZE REPRODUCTIONxSELECTION)
      (==> evo reproduce paras PARASxCR PARASxMU _ELITExSIZE REPRODUCTIONxSELECTION)
      )
    ))

(defmethod GeneticAlgorithm spatial_evolution ()
()
)


(defmethod GeneticAlgorithm spatial_coevolution ()
()
)

(let ((dhc-make-lushflags (concat dhc-make-lushflags (sprintf " -I%s"
PROJECTxDIR))))
  (dhc-make-class () GeneticAlgorithm))