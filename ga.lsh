;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Copyright Martin Cenek <drcenek@gmail.com> 2011
;; All source code is released under the terms of the MIT License.
;; See LICENSE for more information.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(libload "libc/make")
(libload "libc/stdio.lsh")
(libload "problem.lsh")
(libload "setup.lsh")
(libload "random.lsh")
(libload "population.lsh")
(libload "population_spatial.lsh")
(libload "evolution.lsh")
(libload "evolution_spatial.lsh")

;;sets up all parameters, executes evolution, co-evolution, spatial
;;evoltuion and spatial coevolution algorithms. Provides methods to
;;setup algorithm parameters, as well as records and plots results.
(defclass GeneticAlgorithm object
  ((-obj- (Problem)) ob_problem)
  ((-double-) SEED HOSTxCR PARASxCR HOSTxMU PARASxMU)
  ((-int-) GENERATIONS HOSTxPOPxSIZE HOSTxPOPxROW HOSTxPOPxCOL
           PARASxPOPxSIZE PARASxPOPxROW PARASxPOPxCOL HOSTxGENOME
           PARASxGENOME FITNESSxSAMPLExSIZE REPRODUCTIONxSELECTION ALGOL)
  ((-gptr-) FN)
  ((-idx2- (-double-)) BEST)
  ((-idx2- (-uchar-)) HOSTxPOPxINIT PARASxPOPxINIT)
  ((-idx3- (-uchar-)) HOSTxSPxPOPxINIT PARASxSPxPOPxINIT)
)

;;Logging function for messages into stdio or file
(defmethod GeneticAlgorithm log (note)
  (declare (-str-) note)
  (if (<> FN NULL)
      (fprintf FN "%s" note)
    (printf (sprintf "%s" note))))

(defmethod GeneticAlgorithm GeneticAlgorithm (ob _GENERATIONS _HOSTxPOPxSIZE _PARASxPOPxSIZE _HOSTxGENOME _PARASxGENOME _FN)
  (cpheader "#include \"random.h\"")
  (declare (-obj- (Problem)) ob)
  (declare (-int-) _GENERATIONS _HOSTxPOPxSIZE _PARASxPOPxSIZE _HOSTxGENOME _PARASxGENOME)
  (declare (-str-) _FN)
  (setq ob_problem ob)
  (setq GENERATIONS _GENERATIONS)
  (setq HOSTxPOPxROW (to-int (sqrt (to-double _HOSTxPOPxSIZE))))
  (setq HOSTxPOPxCOL (to-int (sqrt (to-double _HOSTxPOPxSIZE))))
  (setq PARASxPOPxROW (to-int (sqrt (to-double _PARASxPOPxSIZE))))
  (setq PARASxPOPxCOL (to-int (sqrt (to-double _PARASxPOPxSIZE))))
  (setq HOSTxPOPxSIZE (* HOSTxPOPxROW HOSTxPOPxCOL))
  (setq PARASxPOPxSIZE (* PARASxPOPxROW PARASxPOPxCOL))
  (setq HOSTxGENOME _HOSTxGENOME)
  (setq PARASxGENOME _PARASxGENOME)
  (if (<> _FN "")
      (setq FN (fopen _FN "wb"))
    (setq FN NULL))
  (setq FITNESSxSAMPLExSIZE 9)
  (setq REPRODUCTIONxSELECTION 2)
  (setq HOSTxCR 1)
  (setq PARASxCR 1)
  (setq HOSTxMU (/ 1 HOSTxGENOME))
  (setq PARASxMU (/ 1 PARASxGENOME))
  (setq HOSTxSPxPOPxINIT (uchar-array HOSTxPOPxROW HOSTxPOPxCOL HOSTxGENOME))
  (setq PARASxSPxPOPxINIT (uchar-array PARASxPOPxROW PARASxPOPxCOL PARASxGENOME))
  (setq HOSTxPOPxINIT (uchar-array HOSTxPOPxSIZE HOSTxGENOME))
  (setq PARASxPOPxINIT (uchar-array PARASxPOPxSIZE PARASxGENOME))
  (setq BEST (double-array GENERATIONS 7))
  (setq SEED (to-double #{seed_random(-1) #}))
  (setq ALGOL -1)
  (==> this log (sprintf "To re-seed experiment, use absolute value of: %f to replicate this experiment\n" SEED))
()
)

;;(==> GeneticAlgorithm log_best (HOST PARAS)
;;seeds random number generator to predefined value
(defmethod GeneticAlgorithm log_best (gen fit_h fit_p x_h y_h x_p y_p)
  (declare (-double-) gen fit_h fit_p x_h y_h x_p y_p)
  (BEST gen 0 gen)
  (BEST gen 1 fit_h)
  (BEST gen 2 fit_p)
  (BEST gen 3 x_h)
  (BEST gen 4 y_h)
  (BEST gen 5 x_p)
  (BEST gen 6 y_p)
  )


;;(==> GeneticAlgorithm set_seed <_SEED>
;;seeds random number generator to predefined value
(defmethod GeneticAlgorithm set_seed (_SEED)
  (declare (-double-) _SEED)
  (setq SEED (abs _SEED))
  (to-double #{set_seed($SEED)#})
  SEED) 

;;(==> GeneticAlgorithm set_host_mutation <HOSTxMU>) 
;;bitwise mutation probability for solution/host genome. 
;;If unset it is 1/HOSTxGENOME
(defmethod GeneticAlgorithm set_host_mutation (_HOSTxMU)
  (declare (-double-) _HOSTxMU)
  (assert (and (< _HOSTxMU 1) (> _HOSTxMU 0))
	  "HOSTxMUTATION: Value out of range <0,1>")
  (setq HOSTxMU _HOSTxMU)
)

;;(==> GeneticAlgorithm set_paras_mutation <pARASxMU>) 
;;bitwise mutation probability for test/parasite genome. 
;;If unset it is 1/PARASxGENOME
(defmethod GeneticAlgorithm set_paras_mutation (_PARASxMU)
  (declare (-double-) _PARASxMU)
  (assert (and (< _PARASxMU 1) (> _PARASxMU 0))
	  "PARASxMUTATION: Value out of range <0,1>")
  (setq PARASxMU _PARASxMU)
)

;;(==> GeneticAlgorithm set_host_crossover <HOSTxCR>) 
;;probability of using one point crossover as reproduction 
;;operator for solution/host population.  
;;If unset it is 1 (always reproduce by 1pt crossover followed 
;;by a bitwise mutation) set to 0 for mutation reproduction only
(defmethod GeneticAlgorithm set_host_crossover (_HOSTxCR)
  (declare (-int-) _HOSTxCR)
  (assert (or (<> _HOSTxCR 1) (<> _HOSTxCR 0))
	  "HOSTxCR: Value out of range 0 or 1")
  (setq HOSTxCR _HOSTxCR)
)

;;(==> GeneticAlgorithm set_paras_crossover <PARASxCR>) 
;;probability of using one point crossover as reproduction 
;;operator for tests/paras population.  
;;If unset it is 1 (always reproduce by 1pt crossover followed 
;;by a bitwise mutation) set to 0 for mutation reproduction only
(defmethod GeneticAlgorithm set_paras_crossover (_PARASxCR)
 (declare (-int-) _PARASxCR)
  (assert (or (<> _PARASxCR 1) (<> _PARASxCR 0))
	  "PARASxCR: Value out of range 0 or 1")
  (setq PARASxCR _PARASxCR)
)

;;(==> GeneticAlgorithm set_fitness_sample_size <FITNESSxSAMPLExSIZE>) 
;;set how many tests/parasites used to assign solution/host fitness
;;value must be >0
(defmethod GeneticAlgorithm set_fitness_sample_size (_FITNESSxSAMPLExSIZE)
 (declare (-int-) _FITNESSxSAMPLExSIZE)
  (assert (> _FITNESSxSAMPLExSIZE 1)
	  "FITNESSxSAMPLExSIZE: PARASxCR: Value must be >0")
  (setq FITNESSxSAMPLExSIZE _FITNESSxSAMPLExSIZE)
)

;;(==> GeneticAlgorithm set_repro_selection <REPROxSELECTION>) 
;;if value 0 use random selection (w/o fitness bias)
;;if value 1 use roulette wheel selection
;;if value 2 use tournament selection of 9 where first indiv is chosen 
;;with bias 0.5^rank, and second is chosen at random w/o bias from tournament group
(defmethod GeneticAlgorithm set_reproduction_selection (_REPRODUCTIONxSELECTION)
 (declare (-int-) _REPRODUCTIONxSELECTION)
  (assert (and (>= _REPRODUCTIONxSELECTION 0) (< _REPRODUCTIONxSELECTION 3))
	  "REPRODUCTIONxSELECTION: Unknown type of reproduction selection (value must be 0,1,2")
  (setq REPRODUCTIONxSELECTION _REPRODUCTIONxSELECTION)
)

;;(==> GeneticAlgorithm set_populations <HOSTxPOPxINIT> <PARASxPOPxINIT>
;;initializes populations of hosts and parasites to predefined arrays rather than random
;;Arrays must have size HOSTxPOPxSIZE by HOSTxGENOME and PARASxPOPxSIZE by PARASxGENOME respectively.)
(defmethod GeneticAlgorithm set_populations (_HOSTxPOPxINIT _PARASxPOPxINIT)
  (declare (-idx2- (-uchar-)) _HOSTxPOPxINIT _PARASxPOPxINIT)
  (assert (and (same-shape-p _HOSTxPOPxINIT HOSTxPOPxINIT)
	       (same-shape-p _PARASxPOPxINIT PARASxPOPxINIT))
	  "HOSTxPOPxINIT or PARASxPOPxINIT: Array shape(s) other than host/paras populations")
  (array-copy _HOSTxPOPxINIT HOSTxPOPxINIT)
  (array-copy _PARASxPOPxINIT PARASxPOPxINIT))

;;(==> GeneticAlgorithm set_populations_spatial <HOSTxSPxPOPxINIT> <PARASxSPxPOPxINIT>
;;initializes populations of hosts and parasites to predefined arrays rather than random
;;Arrays must have size HOSTxPOPxROW HOSTxPOPxCOL by HOSTxGENOME and PARASxPOPxROW by PARASxPOPxCOL by PARASxGENOME respectively.)
(defmethod GeneticAlgorithm set_populations_spatial (_HOSTxSPxPOPxINIT _PARASxSPxPOPxINIT)
  (declare (-idx3- (-uchar-)) _HOSTxSPxPOPxINIT _PARASxSPxPOPxINIT)
  (assert (and (same-shape-p _HOSTxSPxPOPxINIT HOSTxSPxPOPxINIT)
	       (same-shape-p _PARASxSPxPOPxINIT PARASxSPxPOPxINIT))
	  "HOSTxPOPxINIT or PARASxPOPxINIT: Array shape(s) other than host/paras populations")
  (array-copy _HOSTxSPxPOPxINIT HOSTxSPxPOPxINIT)
  (array-copy _PARASxSPxPOPxINIT PARASxSPxPOPxINIT))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;NON-SPATIAL EVOLUTION (STANDARD EVOLUTION)
(defmethod GeneticAlgorithm evolution (_HOSTxINIT _PARASxINIT _ELITExSIZE)
  (setq ALGOL 0)
  (declare (-double-) _HOSTxINIT _PARASxINIT)
  (declare (-int-) _ELITExSIZE)
  (let* ((host (new Population HOSTxPOPxSIZE HOSTxGENOME))
	 (paras (new Population PARASxPOPxSIZE PARASxGENOME))
	 (evo (new Evolution ob_problem))
	 (best_h 0))
    (declare (-obj- (Population)) host paras)
    (declare (-obj- (Evolution)) evo)
    (declare (-int-) best_h)

    (assert (and (> _HOSTxINIT -1) (<= _HOSTxINIT 1)
    		 (> _PARASxINIT -1) (<= _PARASxINIT 1))
    	    "HOSTxINIT or PARASxINIT: Values out of bounds <-1, 1>")
    ;initialize hosts
    (==> host init _HOSTxINIT)
    (if (< _HOSTxINIT 0)
    	(==> host set_population HOSTxPOPxINIT)
      (array-copy (==> host get_population) HOSTxPOPxINIT))

    ;initialize parasites
    (==> paras init _PARASxINIT)
    (if (< _PARASxINIT 0)
    	(==> paras set_population PARASxPOPxINIT)
      (array-copy (==> paras get_population) PARASxPOPxINIT))
    
    ;;run evolution loop
    (for* (i 0 GENERATIONS)
      (declare (-int-) i)
      ;assign host fitness 
      (==> evo evaluate_evolution host paras FITNESSxSAMPLExSIZE)
      ;normalize host fitness to <0,1)
      ;(==> host normalize_fitness)
      ;sort host population 
      (==> host sort_population 0) ;descending
      ;reproduce hosts
      (==> this log (sprintf "G: %d\n hosts: \n" i ))
      ;print host population
      (==> host print_population FN)
      (==> this log (sprintf "paras: \n"))
      ;print paras population
      (==> paras print_population FN)
      (setq best_h (==> host select_best))
      (==> this log_best (to-double i) (==> host get_fitness (to-int best_h)) -1.0 (to-double best_h) -1.0 -1.0 -1.0)
      (==> evo reproduce host HOSTxCR HOSTxMU _ELITExSIZE REPRODUCTIONxSELECTION)
      ;reinitialize parasites
      (if (< _PARASxINIT 0)
      	  (==> ob_problem paras_init (==> paras get_population))
      	(==> paras init _PARASxINIT))
       )
    ()
    ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;NON-SPATIAL COEVOLUTION - same as above, but rather than renintializing 
;;parasite population, it is evolved at the same time.
(defmethod GeneticAlgorithm coevolution (_HOSTxINIT _PARASxINIT _ELITExSIZE)
  (setq ALGOL 1)
  (declare (-double-) _HOSTxINIT _PARASxINIT)
  (declare (-int-) _ELITExSIZE)
  (let* ((host (new Population HOSTxPOPxSIZE HOSTxGENOME))
	 (paras (new Population PARASxPOPxSIZE PARASxGENOME))
	 (evo (new Evolution ob_problem))
	 (best_h 0) (best_p 0))
    (declare (-obj- (Population)) host paras)
    (declare (-obj- (Evolution)) evo)
    (declare (-int-) best_h best_p)
    
    (assert (and (> _HOSTxINIT -1) (<= _HOSTxINIT 1)
		 (> _PARASxINIT -1) (<= _PARASxINIT 1))
	    "HOSTxINIT or PARASxINIT: Values out of bounds <-1, 1>")
    ;initialize hosts
    (==> host init _HOSTxINIT)
    (if (< _HOSTxINIT 0)
	(==> host set_population HOSTxPOPxINIT)
      (array-copy (==> host get_population) HOSTxPOPxINIT))

    ;initialize parasites
    (==> paras init _PARASxINIT)
    (if (< _PARASxINIT 0)
	(==> paras set_population PARASxPOPxINIT)
      (array-copy (==> paras get_population) PARASxPOPxINIT))
    
    ;;run evolution loop
    (for* (i 0 GENERATIONS)
      (declare (-int-) i)
      ;assign host fitness 
      (==> evo evaluate_coevolution host paras FITNESSxSAMPLExSIZE)
      ;normalize host fitness to <0,1)
      ;(==> host normalize_fitness)
      ;sort host population 
      (==> host sort_population 0) ;descending
      ;reproduce hosts
      (==> this log (sprintf "G: %d\n hosts: \n" i ))
      ;print host population
      (==> host print_population FN)
      ;normalize paras fitness to <0,1)
      ;(==> paras normalize_fitness)
      ;sort paras population 
      (==> paras sort_population 0) ;descending
      (==> this log (sprintf "paras: \n"))
      ;print paras population
      (==> paras print_population FN)
      (setq best_h (==> host select_best))
      (setq best_p (==> paras select_best))
      (==> this log_best (to-double i) (==> host get_fitness (to-int best_h)) 
	                               (==> paras get_fitness (to-int best_p)) 
				       (to-double best_h) -1.0 (to-double best_h) -1.0)
      (==> evo reproduce host HOSTxCR HOSTxMU _ELITExSIZE REPRODUCTIONxSELECTION)
      (==> evo reproduce paras PARASxCR PARASxMU _ELITExSIZE REPRODUCTIONxSELECTION)
      )
    ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;SPATIAL EVOLUTION
(defmethod GeneticAlgorithm evolution_spatial (_HOSTxINIT _PARASxINIT)
  (setq ALGOL 2)
  (declare (-double-) _HOSTxINIT _PARASxINIT)
  (let* ((host (new PopulationSP HOSTxPOPxSIZE HOSTxGENOME))
	 (paras (new PopulationSP PARASxPOPxSIZE PARASxGENOME))
	 (evo (new EvolutionSP ob_problem))
	 )
    (declare (-obj- (PopulationSP)) host paras)
    (declare (-obj- (EvolutionSP)) evo)
    
    (assert (and (> _HOSTxINIT -1) (<= _HOSTxINIT 1)
		 (> _PARASxINIT -1) (<= _PARASxINIT 1))
	    "HOSTxINIT or PARASxINIT: Values out of bounds <-1, 1>")
    (assert (and (= HOSTxPOPxROW PARASxPOPxROW) (= HOSTxPOPxCOL PARASxPOPxCOL))
	    "HOST and PARAS: Populations have different sizes")

    ;initialize hosts
    (==> host init _HOSTxINIT)
    (if (< _HOSTxINIT 0)
	(==> host set_population HOSTxSPxPOPxINIT)
      (array-copy (==> host get_population) HOSTxSPxPOPxINIT))
    (==> host update_borders_population)

    ;initialize parasites
    (==> paras init _PARASxINIT)
    (if (< _PARASxINIT 0)
	(==> paras set_population PARASxSPxPOPxINIT)
      (array-copy (==> paras get_population) PARASxSPxPOPxINIT))
    (==> paras update_borders_population)
    ;;re-set number of tests used to assess solution's fitness
    (setq FITNESSxSAMPLExSIZE 9)

    ;;run spatial evolution loop
    (for* (i 0 GENERATIONS)
      (declare (-int-) i)
      ;assign host fitness 
      (==> evo evaluate_evolution host paras FITNESSxSAMPLExSIZE)
      ;print host population
      (==> this log (sprintf "G: %d\n hosts: \n" i ))
      (==> host print_population FN)
      (==> this log (sprintf "paras: \n"))
      ;print paras population
      (==> paras print_population FN)
      (==> host select_best)
      (==> this log_best (to-double i) 
	   (==> host get_fitness_global :host:x :host:y) -1
	   (to-double :host:x) (to-double :host:y) -1 -1)
      ;reproduce hosts
      (==> evo reproduce host HOSTxCR HOSTxMU REPRODUCTIONxSELECTION)
      ;reinitialize parasites
      (if (< _PARASxINIT 0)
	  (==> ob_problem paras_init_spatial (==> paras get_population))
	(==> paras init _PARASxINIT))
      )
  ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;SPATIAL COEVOLUTION
(defmethod GeneticAlgorithm coevolution_spatial (_HOSTxINIT _PARASxINIT)
  (setq ALGOL 3)
  (declare (-double-) _HOSTxINIT _PARASxINIT)
  (let* ((host (new PopulationSP HOSTxPOPxSIZE HOSTxGENOME))
	 (paras (new PopulationSP PARASxPOPxSIZE PARASxGENOME))
	 (evo (new EvolutionSP ob_problem))
	 )
    (declare (-obj- (PopulationSP)) host paras)
    (declare (-obj- (EvolutionSP)) evo)
    
    (assert (and (> _HOSTxINIT -1) (<= _HOSTxINIT 1)
		 (> _PARASxINIT -1) (<= _PARASxINIT 1))
	    "HOSTxINIT or PARASxINIT: Values out of bounds <-1, 1>")
    (assert (and (= HOSTxPOPxROW PARASxPOPxROW) (= HOSTxPOPxCOL PARASxPOPxCOL))
	    "HOST and PARAS: Populations have different sizes")

    ;initialize hosts
    (==> host init _HOSTxINIT)
    (if (< _HOSTxINIT 0)
	(==> host set_population HOSTxSPxPOPxINIT)
      (array-copy (==> host get_population) HOSTxSPxPOPxINIT))
    (==> host update_borders_population)

    ;initialize parasites
    (==> paras init _PARASxINIT)
    (if (< _PARASxINIT 0)
	(==> paras set_population PARASxSPxPOPxINIT)
      (array-copy (==> paras get_population) PARASxSPxPOPxINIT))
    (==> paras update_borders_population)
    ;;re-set number of tests used to assess solution's fitness
    (setq FITNESSxSAMPLExSIZE 9)

    ;;run spatial evolution loop
    (for* (i 0 GENERATIONS)
      (declare (-int-) i)
      ;assign host fitness 
      (==> evo evaluate_coevolution host paras FITNESSxSAMPLExSIZE)
      ;print host population
      (==> this log (sprintf "G: %d\n hosts: \n" i ))
      (==> host print_population FN)
      (==> this log (sprintf "paras: \n"))
      ;print paras population
      (==> paras print_population FN)
      (==> host select_best)
      (==> paras select_best)
      (==> this log_best (to-double i) 
	   (==> host get_fitness_global :host:x :host:y) 
	   (==> paras get_fitness_global :paras:x :paras:y) 
	   (to-double :host:x) (to-double :host:y) 
	   (to-double :paras:x) (to-double :paras:y))
      ;reproduce hosts
      (==> evo reproduce host HOSTxCR HOSTxMU REPRODUCTIONxSELECTION)
      ;reproduce paras
      (==> evo reproduce paras PARASxCR PARASxMU REPRODUCTIONxSELECTION)
      )
  ))


(let ((dhc-make-lushflags (concat dhc-make-lushflags (sprintf " -I%s"
PROJECTxDIR))))
  (dhc-make-class () GeneticAlgorithm))

(defmethod GeneticAlgorithm help ()
  (sys "cat HELP")
)

(defmethod GeneticAlgorithm plot ()
  (libload "gnuplot/plot")
  (let* ((data (double-array GENERATIONS 2))
	 (data2 (double-array GENERATIONS 2))
	 (max_y 0)
	 (gp (new Gnuplot 'interactive ()))
         (g ()) )

    (array-copy (idx-select BEST 1 0) (idx-select data 1 0))
    (array-copy (idx-select BEST 1 0) (idx-select data2 1 0))
    (array-copy (idx-select BEST 1 1) (idx-select data 1 1))
    (array-copy (idx-select BEST 1 2) (idx-select data2 1 1))
    (setq max_y (+ (max ((idx-sup (idx-select data 1 1))) 
			((idx-sup (idx-select data2 1 1)))) 3))
    (cond 
     ((= ALGOL 0)
	(setq g (plot* (title "Evolution: Host Fitness")
		       "set xlabel \"generations\""
		       "set ylabel \"fitness\""
		       (xrange 0 GENERATIONS)
		       (yrange 0 max_y)
		       (ytics (arange 0 max_y (/ max_y 10)))
		       (margin 'left 0.15  'right 0.95)
		       (lines data))))
     ((= ALGOL 1)
       (setq g (plot* (title "CoEvolution: Host(red) and Parasite(blue) Fitness")
		       "set xlabel \"generations\""
		       "set ylabel \"fitness\""
 		       (xrange 0 GENERATIONS)
		       (yrange 0 max_y)
		       (ytics (arange 0 max_y (/ max_y 10)))
		       (margin 'left 0.15  'right 0.95)
		       (lines data (lc "red"))
		       (lines data2 (lc "blue")))))
     ((= ALGOL 2)
 	(setq g (plot* (title "SP Evolution Host Fitness")
		       "set xlabel \"generations\""
		       "set ylabel \"fitness\""
		       (xrange 0 GENERATIONS)
		       (yrange 0 max_y)
		       (ytics (arange 0 max_y (/ max_y 10)))
		       (margin 'left 0.15  'right 0.95)
		       (lines data))))
     ((= ALGOL 3)
       (setq g (plot* (title "SP CoEvolution Host(red) and Parasite(blue) Fitness")
		       "set xlabel \"generations\""
		       "set ylabel \"fitness\""
 		       (xrange 0 GENERATIONS)
		       (yrange 0 max_y)
		       (ytics (arange 0 max_y (/ max_y 10)))
		       (margin 'left 0.15  'right 0.95)
		       (lines data (lc "red"))
		       (lines data2 (lc "blue")))))  )
    
    (==> gp do-graph g)
    (pause)
    ))
