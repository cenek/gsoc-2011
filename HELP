Use of GeneticAlgorithm object:

A defines an instance of a <GeneticAlgorithm> object with <Problem>
object instance passed in. GA algorithm is solving the "fitness"
function in the instance of <Problem> object. Throughout this document
terms candidate solutions and hosts as well as tests and parasites are
used interchangeably.

(new GeneticAlgorithm <Problem> 
     		      <GENERATIONS> 
		      <HOSTxPOPxSIZE>
		      <PARASxPOPxSIZE> 
		      <HOSTxGENOME> 
		      <PARASxGENOME> 
		      <FN>) 

Following are parameters passed into <GeneticAlgorithm>
<Problem> is an instance of (new Problem) that defines the user
defined fitness function.

<GENERATIONS> 	- number of genetic epochs the GA is executed for
<HOSTxPOPxSIZE> - size of candidate solution population
		- spatially extended populations will arrange the
                  population size onto a closes 2D sqare (size 50 will
                  be arranged on 7x7 square)
<PARASxPOPxSIZE>- size of test cases population (same as HOSTxPOPxSIZE)
<HOSTxGENOME>   - length of candidate solution binary string
<PARASxGENOME>  - length of test case binary string

<FN> 		- output file name - if set to "" output is sent to
                  stdio, o.w. a an output file is created with given name.

note: The same number of offspring are generated as the size of the
original population. The number of host and parasite offspring is the
same as <HOSTxPOPxSIZE> and <PARASxPOPxSIZE> respectively

In addition to the parameters passed into the object constructor, the
following internal <VARIABLE> can be set by 
(==> GeneticAlgorithm method_name <VARIABLE>) call:

<HOSTxMU>: (==> GeneticAlgorithm set_host_mutation <HOSTxMU>) 
   a bitwise mutation probability for a host genome. If unset
   it corresponds to 1/HOSTxGENOME
<PARASxMU>: (==> GeneticAlgorithm set_paras_mutation <PARASxMU>) 
   the same as set_host_mutation but for the parasite population
<HOSTxCR>: (==> GeneticAlgorithm set_host_crossover <HOSTxCR>) 
   a probability of using one point crossover as reproduction operator
   to reproduce host population. If unset it is 1 (always reproduce by
   1pt crossover followed by a bitwise mutation) set to 0 for mutation
   reproduction only. If value between (0,1), then do crossover with
   this probability.
<PARASxCR>: (==> GeneticAlgorithm set_paras_crossover <PARASxCR>) 
   the same as set_host_crossover but for the parasite population

<FITNESSxSAMPLExSIZE>: (==> GeneticAlgorithm set_fitness_sample_size <FITNESSxSAMPLExSIZE>) 
   for non-spatial algorithms: number of genomes with the highest
   fitness that will be copied over unchanged to the offspring
   population before the rest of the offspring are generated. If there
   are more then one genome with the same highest fitness, randomly
   chose the ones to be copied over. If value is 0 no genomes are
   copied over (all offspring are generated by reproduction).

<REPRODUCTIONxSELECTION>: (==>  GeneticAlgorithm set_reproduction_selection <REPRODUCTIONxSELECTION>
   if value 0 use random selection (w/o fitness bias)
   if value 1 use biased roulette wheel selection
   if value 2 use tournament selection of 9 where the first individual
      is chosen with a bias of 0.5^rank, and the second is chosen at
      random w/o bias from the tournament group
   The same methods for reproduction selection are used in spatially
   extended populations, but these methods are performed with respect
   to a local neighborhood

<HOSTxPOPxINIT> and <PARASxPOPxINIT: (==> GeneticAlgorithm set_populations <HOSTxPOPxINIT> <PARASxPOPxINIT>
   Initialize populations of hosts and parasites to predefined arrays
   rather than at random. Arrays must have size HOSTxPOPxSIZE by
   HOSTxGENOME and PARASxPOPxSIZE by PARASxGENOME respectively.
   If the parameters <HOSTSxINIT> <PARASxINIT> (probabilities with
   which the populations are generated at random - see below) are
   negative, use these populations instead. In addition, at each
   evolutionary step of evolution, the populations of parasites are
   reinitialized by a call to (==> Problem init_paras <PARASxINIT>) -
   user has to reinitialize new population of parasites at each
   evolutionary epoch. (If this methods is empty, the same unchanged
   <PARASxINIT> population is used during the execution of the
   algorithm). The spatial evolution algorithm uses init_paras_spatial
   and <PARASxSPxPOPxINIT> respectively. The co-evolutionary
   algorithms do not reinitialize parasite populations, rather they
   are evolved - this functionality is not present for these
   algorithms.

<HOSTxSPxPOPxINIT> and <PARASxSPxPOPxINIT: (==> GeneticAlgorithm set_populations_spatial <HOSTxSPxPOPxINIT> <PARASxSPxPOPxINIT>
   Initialize populations of hosts and parasites to predefined arrays
   rather than at random. Arrays must have size HOSTxSPxPOPxROW by
   HOSTxSPxPOPxCOL by HOSTxGENOME and PARASxSPxPOPxROW by
   PARASxSPxPOPxCOL by PARASxGENOME respectively. (Same as
   'set_populations', not available for spatial co-evolution)


--------------------------------------------------------------- 
To run non-spatial evolution - a standard evolution. It uses
FITNESSxSAMPLExSIZE number of randomly selected tests from the test
population to assess host's fitness. Then the fitness values in the
population are normalized to (0,1), and population is sorted. The
hosts are reproduced according to HOSTxCR, HOSTxMU, ELITExSIZE and
REPRODUCTIONxSELECTION parameters.

(==> GeneticAlgorithm evolution <HOSTSxINIT> <PARASxINIT> <ELITExSIZE>)

<HOSTSxINIT> - initialize host population: 
   if value -1, initialized populations from predefined arrays. Array
         must be initialized by calling 'set_populations' before
         running evolution. See the above description of
         'set_populations' method for more details. Of course the host
         population will not be reinitialized at each evolutionary
         epoch, since it is evolving.
   if value between (0,1), each genome will be randomly initialized
         with a binomial density equal this value.
   if value 0, each genome will be randomly initialized and the entire
         population will have uniformally distributed densities (each
         genome with different density)

<PARASxINIT> - initialize parasite population same as <HOSTSxINIT>.
   if value is -1 (==> Problem init_paras <PARASxINIT>) is called at
         each evolutionary epoch to be initialized.

<ELITExSIZE> - copy ELITExSIZE number of genomes with the highest
    fitness to the offspring population. If there are many genomes
    with the same (highest) fitness, choose randomly (w/o replacement)
    from among these until ELITExSIZE genomes were copied over to the
    offspring population. ELITExSIZE must be between 0 and POPxSIZE
    (if 0, no genomes are copied, and the entire offspring population
    is generated by reproduction.


--------------------------------------------------------------- 
To run non-spatial co-evolution - the method parameters are the same
as for 'evolution.
The same algorithm as 'evolution' is used, except the test
cases/parasites are evolved at the same time as host (rather than
being renintialized at each evolutionary epoch). Each parasite's
fitness values are added up every time it is used to evaluated host's
fitness. After hosts fitness is evaluated, each parasite's fitness is
normalized by number of times it was used. The parasite population is
reproduced according to the PARASxCR, PARASxMU, ELITExSIZE and
REPRODUCTIONxSELECTION parameters.

(==> GeneticAlgorithm coevolution <HOSTSxINIT> <PARASxINIT> <ELITExSIZE>)

--------------------------------------------------------------- 
To run spatial evolution.
Population of hosts and parasites are arranges in a 2D space. Each
site in 2D space contains one host and one parasite. The fitness
assessment and reproduction selection is always done within the local
neighborhood. Each individual in a population is replaced by an
offspring that was generated by according to reproduction paramenters
HOSTxCR, HOSTxMU and REPRODUCTIONxSELECTION for hosts. Since parasites
are not evolved, they are reinitialized or replaced at the end of each
evolutionary epoch (see PARASxINIT for details).

(==> GeneticAlgorithm evolution_spatial <HOSTSxINIT> <PARASxINIT>)

--------------------------------------------------------------- 
To run spatial co-evolution.
Same as spatial evolution, except the population of parasites evolves
at the same time according to PARASxCR, PARASxMU and
REPRODUCTIONxSELECTION parameters. Fitness of each parasite is
assigned when it is evaluated by a host from its local site. (Unlike
hosts that get fitness assigned by evaluation on all 9 parasites in
local neighborhood. Parasite's fitness is assigned from the evaluation
on a host in its site).

(==> GeneticAlgorithm evolution_spatial <HOSTSxINIT> <PARASxINIT>)

--------------------------------------------------------------- 
A generic plotting method for displaying fitness of the best
performing genomes. This function returns a matrix M that contains
<GENERATIONS>number of rows, and seven columns that represent
(generation, best host's fitness, best parasite's fitness, best host's
index x, best host's index y, best parasite's index x, best parasite's
index y). If a particular algorithm does not use given columns, they
are set to -1.
 
(==> GeneticAlgorithm plot) 
